version: "3.9"

services:
  mysql:
    container_name: mysql
    image: mysql:8.0
    platform: linux/amd64
    environment:
      MYSQL_ROOT_PASSWORD: "P@55W0rD"
    ports:
      - "3366:3306"
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      interval: 5s
      timeout: 10s
      retries: 10
    volumes:
      - ./docker/mysql/data:/var/lib/mysql
      - ./docker/mysql/script:/opt/scripts
      - ./docker/mysql/script/setup-product.sql:/docker-entrypoint-initdb.d/1.sql
      - ./docker/mysql/script/setup-customer.sql:/docker-entrypoint-initdb.d/2.sql
    command: --default-authentication-plugin=mysql_native_password
    networks:
      - tech-challenge-network-local

  redis:
    container_name: redis
    image: library/redis:6-alpine
    platform: linux/amd64
    ports:
      - "6380:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "-p", "6379", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      - tech-challenge-network-local

  cdn:
    container_name: cdn
    image: nginx:alpine
    platform: linux/amd64
    restart: always
    ports:
      - "8888:8080"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/static:/tech-challenge/static
    networks:
      - tech-challenge-network-local

  localstack:
    container_name: localstack
    image: localstack/localstack:3.0.2
    ports:
      - "127.0.0.1:4566:4566"            # LocalStack Gateway
      - "127.0.0.1:4510-4559:4510-4559"  # external services port range
    environment:
      # LocalStack configuration: https://docs.localstack.cloud/references/configuration/
      - DEBUG=${DEBUG:-0}
      - AWS_ACCESS_KEY_ID=localstackAccessKeyId
      - AWS_SECRET_ACCESS_KEY=localstackSecretAccessKey
    volumes:
      - ./docker/localstack/scripts:/docker-entrypoint-initaws.d
      - "${LOCALSTACK_VOLUME_DIR:-./volume}:/var/lib/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      - tech-challenge-network-local

#  localstack-resources:
#    container_name: localstack-resources
#    restart: "no"
#    image: amazon/aws-cli:2.11.0
#    depends_on:
#      localstack:
#        condition: service_healthy
#    environment:
#      - AWS_DEFAULT_REGION=us-east-1
#      - AWS_ACCESS_KEY_ID=localstackAccessKeyId
#      - AWS_SECRET_ACCESS_KEY=localstackSecretAccessKey
#    entrypoint: [ "sh", "-c" ]
#    command: [
#      "
#        aws --endpoint-url=http://localstack:4566 sns create-topic --name local-cart-microservice-close-cart-topic &&
#        aws --endpoint-url=http://localstack:4566 sqs create-queue --queue-name local-payment-microservice-close-cart-queue &&
#        aws --endpoint-url=http://localstack:4566 sqs create-queue --queue-name local-order-microservice-close-cart-queue &&
#        aws --endpoint-url=http://localstack:4566 sns subscribe --topic-arn arn:aws:sns:us-east-1:000000000000:local-cart-microservice-close-cart-topic --protocol sqs --notification-endpoint arn:aws:sqs:us-east-1:000000000000:local-payment-microservice-close-cart-queue --attributes RawMessageDelivery=true &&
#        aws --endpoint-url=http://localstack:4566 sns subscribe --topic-arn arn:aws:sns:us-east-1:000000000000:local-cart-microservice-close-cart-topic --protocol sqs --notification-endpoint arn:aws:sqs:us-east-1:000000000000:local-order-microservice-close-cart-queue --attributes RawMessageDelivery=true
#      "
#    ]
#    networks:
#      - tech-challenge-network-local

networks:
  tech-challenge-network-local:
    driver: bridge
